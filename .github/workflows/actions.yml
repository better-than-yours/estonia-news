name: actions
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  actions:
    runs-on: ubuntu-latest
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
    strategy:
      matrix:
        arch: [amd64, arm64, armv7]
        os: [linux]
        include:
          - { arch: amd64,  goarch: amd64,  goarm: "" }
          - { arch: arm64,  goarch: arm64,  goarm: "" }
          - { arch: armv7,  goarch: arm,    goarm: 7 }
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
      - name: Build and test
        run: |
          cd $GITHUB_WORKSPACE/backend && go test -timeout=60s -covermode=count -coverprofile=$GITHUB_WORKSPACE/profile.cov_tmp ./...
          cat $GITHUB_WORKSPACE/profile.cov_tmp | grep -v "_mock.go" > $GITHUB_WORKSPACE/profile.cov
      - name: Install golangci-lint and goveralls
        run: |
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh| sh -s -- -b $GITHUB_WORKSPACE v1.27.0
          GO111MODULE=off go get -u -v github.com/mattn/goveralls
      - name: Run linters
        run: cd $GITHUB_WORKSPACE/backend && $GITHUB_WORKSPACE/golangci-lint run --modules-download-mode=readonly
      - name: Submit coverage
        run: $(go env GOPATH)/bin/goveralls -service="github" -coverprofile=$GITHUB_WORKSPACE/profile.cov
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set env variables
        run: |
          echo "REPOSITORY=ghcr.io/${REPOSITORY:-$GITHUB_REPOSITORY}-api" >> $GITHUB_ENV
          echo "DOCKER_USER=${DOCKER_USER:-$GITHUB_ACTOR}" >> $GITHUB_ENV
        env:
          REPOSITORY: ${{ secrets.REPOSITORY }}
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
      - name: Build image
        run: |
          docker build --build-arg VERSION=$GITHUB_REF:$GITHUB_SHA --build-arg GOARCH=${{ matrix.goarch }} --build-arg GOARM=${{ matrix.goarm }} -t $REPOSITORY:${{ matrix.arch }} -f Dockerfile.backend .
      - name: Publish image
        if: github.ref == 'refs/heads/master'
        run: |
          echo ${{ secrets.DOCKER_TOKEN }} | docker login ghcr.io -u $DOCKER_USER --password-stdin
          docker push $REPOSITORY:${{ matrix.arch }}
          docker manifest create $REPOSITORY:latest $REPOSITORY:amd64 $REPOSITORY:arm64 $REPOSITORY:armv7
          docker manifest annotate $REPOSITORY $REPOSITORY:${{ matrix.arch }} --arch "${{ matrix.goarch }}" --os "${{ matrix.os }}" --variant "${{ matrix.goarm }}"
          docker manifest push $REPOSITORY
